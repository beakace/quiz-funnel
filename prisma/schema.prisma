// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  quizzes       Quiz[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Quiz models
model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  slug        String   @unique
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions Question[]
  results   Result[]
  leads     Lead[]
  settings  Settings?
}

model Question {
  id          String   @id @default(cuid())
  quizId      String
  text        String
  description String?
  imageUrl    String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quiz     Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  Option[]
  answers  Answer[]
  logicJumps LogicJump[]
}

model Option {
  id          String   @id @default(cuid())
  questionId  String
  text        String
  imageUrl    String?
  score       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  question  Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers   Answer[]
  logicJumps LogicJump[]
}

model LogicJump {
  id          String   @id @default(cuid())
  questionId  String
  optionId    String
  nextQuestionId String?
  resultId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  question     Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option       Option    @relation(fields: [optionId], references: [id], onDelete: Cascade)
  result       Result?   @relation(fields: [resultId], references: [id])
}

model Result {
  id          String   @id @default(cuid())
  quizId      String
  title       String
  description String?
  imageUrl    String?
  minScore    Int?
  maxScore    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quiz       Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  logicJumps LogicJump[]
}

model Lead {
  id          String   @id @default(cuid())
  quizId      String
  name        String
  email       String
  phone       String?
  score       Int?
  resultId    String?
  answers     Answer[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Answer {
  id          String   @id @default(cuid())
  leadId      String
  questionId  String
  optionId    String
  createdAt   DateTime @default(now())

  lead      Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  question  Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option    Option    @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

model Settings {
  id          String   @id @default(cuid())
  quizId      String   @unique
  primaryColor String?
  secondaryColor String?
  fontFamily  String?
  logoUrl     String?
  showProgressBar Boolean @default(true)
  redirectUrl String?
  emailNotification Boolean @default(false)
  emailTemplate String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}
